-- @atlcompiler emftvm
-- $Id$

-------------------------------------------------------------------------------
--- Copyright (c) 2014 ATOS S.A.
--- All rights reserved. This program and the accompanying materials
--- are made available under the terms of the Eclipse Public License v1.0
--- which accompanies this distribution, and is available at
--- http://www.eclipse.org/legal/epl-v10.html
---
--- Contributors:
---     Jesús Gorroñogoitia - main development
--- 	Burak Karaboga - main development
---		Javier Garcia - main development
---
--- Initially developed in the context of ARTIST EU project www.artist-project.eu    
---     
-------------------------------------------------------------------------------

library "lib::Eclipse2RCPMapping";

---********************************RCP  Queries************************************---
--- detected workbench stereotyped classes
helper def: workbenchStereotypedModel: Sequence(UML2!Model) = 
	UML2!Model.allInstancesFrom('IN')->select(m | m.isMainModel())->debug ('workbench');

--- detected view stereotyped classes
helper def: viewStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsView())-> debug ('views');

--- detected perspective stereotyped classes
helper def: perspectiveStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsPerspective())-> debug ('perspectives');

--- detected action stereotyped classes
helper def: actionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginWithRoleForClassLabel('action', 'class'))-> debug ('actions');

--- detected view actions stereotyped classes
helper def: viewActionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsViewAction())-> debug ('view actions');

--- detected toolbar actions stereotyped classes
helper def: toolBarActionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsToolBarAction())-> debug ('toolbar actions');

--- detected menu actions stereotyped classes
helper def: menuActionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsMenuAction())-> debug ('menu actions');

--- detected object actions stereotyped classes
helper def: objectActionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsObjectAction())-> debug ('object actions');

--- detected object contribution stereotyped classes
helper def: objectContributionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.isInPluginAsBusinessObject())-> debug ('objectContributions');

--- union of collections with RCP stereotyped classes
helper def : allStereotypedClasses() : Sequence(UML2!Class) = thisModule.viewStereotypedClasses
	->union(thisModule.perspectiveStereotypedClasses)->union(thisModule.actionStereotypedClasses)
	->union(thisModule.objectContributionStereotypedClasses);

---******************************END of RCP Queries********************************---


--- defines the mapping between RCP queries and GUI profile stereotypes
helper def : queries() : Map (Sequence(UML2!Element), UML2!Stereotype) = 
	Map {(thisModule.viewStereotypedClasses, thisModule.viewStereotype), 
		 (thisModule.perspectiveStereotypedClasses, thisModule.perspectiveStereotype),
		 (thisModule.viewActionStereotypedClasses, thisModule.viewActionStereotype),
		 (thisModule.objectContributionStereotypedClasses, thisModule.businessObjectStereotype),
		 (thisModule.toolBarActionStereotypedClasses,thisModule.toolBarActionStereotype),
		 (thisModule.menuActionStereotypedClasses,thisModule.menuActionStereotype),
		 (thisModule.objectActionStereotypedClasses,thisModule.objectActionStereotype)
	};
	
--- defines the plugin attributes to obtain the name property for applied GUI stereotypes
helper def : nameAttributes() : Map (UML2!Stereotype, TupleType (role:String, classLabel:String, attrName:String)) = 
Map {(thisModule.viewStereotype, Tuple{role='view', classLabel='class', attrName='name'}), 
	 (thisModule.perspectiveStereotype, Tuple{role='perspective', classLabel='class', attrName='name'}),
	 (thisModule.viewActionStereotype, Tuple{role='action', classLabel='class', attrName='label'}),
	 (thisModule.toolBarActionStereotype, Tuple{role='action', classLabel='class', attrName='label'}),
	 (thisModule.menuActionStereotype, Tuple{role='action', classLabel='class', attrName='label'}),
	 (thisModule.objectActionStereotype, Tuple{role='action', classLabel='class', attrName='label'})
};

--- it specifies the profile to be applied at model level
helper def : modelStereotype : UML2!Stereotype = thisModule.workbenchStereotype;

--- structure that defines the properties of different stereotyped applications
--- it includes the stereotype and its corresponding stereotypes elements, and a list of property names and their values
helper def : stereotypeAttributes(element: OclAny) : 
	Map (UML2!Stereotype, 
		TupleType (stereotypedElements:Sequence(UML2!Element), attributes:Map(String, Sequence(UML2!Elements)))) = 
	Map {
			(thisModule.workbenchStereotype, 
		 		Tuple{stereotypedElements=thisModule.workbenchStereotypedModel, 
					attributes=Map{
						('perspectives', thisModule.perspectiveStereotypedClasses->collect(c | c.resolve().getStereotypeApplications())->flatten()),
						('toolBarActions', thisModule.toolBarActionStereotypedClasses->collect(c | c.resolve().getStereotypeApplications())->flatten()),
						('menuActions', thisModule.menuActionStereotypedClasses->collect(c | c.resolve().getStereotypeApplications())->flatten())
					}
		 		}
			),
			(thisModule.perspectiveStereotype, 
		 		Tuple{stereotypedElements=thisModule.perspectiveStereotypedClasses, 
					attributes=Map{
						('views', thisModule.viewStereotypedClasses->select (c|
							c.belongsToPackage(element.refImmediateComposite()))->collect(c | c.resolve().getStereotypeApplications())->flatten())
					}
		 		}
			),
			(thisModule.viewStereotype, 
		 		Tuple{stereotypedElements=thisModule.viewStereotypedClasses, 
					attributes=Map{
						('actions', thisModule.viewActionStereotypedClasses->select (a| 
							a.isActionForView(element))->collect(c | c.resolve().getStereotypeApplications())->flatten())
					}
		 		}
			),
			(thisModule.businessObjectStereotype, 
		 		Tuple{stereotypedElements=thisModule.objectContributionStereotypedClasses, 
					attributes=Map{
						('actions', thisModule.objectActionStereotypedClasses->select (a|
										a.isActionForObject(element))->collect(c | c.resolve().getStereotypeApplications())->flatten())
					}
		 		}
			)
		};
		
--- A sequence containing all the elements from IN GWT
helper def: elementsFromGWT: Sequence(UML2!Element) = UML2!Element.allInstancesFrom('INGWT');

--- A sequence containing all the view elements from IN GWT
helper def: viewsInGWT: Sequence(UML2!Element) = 
	thisModule.elementsFromGWT->select(e|
		not e.getAppliedStereotype('RCP::View').oclIsUndefined());
