-- @atlcompiler emftvm
-- @nsURI UML2=http://www.eclipse.org/uml2/4.0.0/UML
-- $Id$

-------------------------------------------------------------------------------
--- Copyright (c) 2014 ATOS S.A.
--- All rights reserved. This program and the accompanying materials
--- are made available under the terms of the Eclipse Public License v1.0
--- which accompanies this distribution, and is available at
--- http://www.eclipse.org/legal/epl-v10.html
---
--- Contributors:
---     Jesús Gorroñogoitia - main development
--- 	Burak Karaboga - main development
---		Javier Garcia - main development
---
--- Initially developed in the context of ARTIST EU project www.artist-project.eu    
---     
-------------------------------------------------------------------------------

library "lib::UMLLib";
--- Library with methods to manage UML2 models

--- Contains all packages from IN
helper def: allINPackages:Sequence(UML2!Package) = UML2!Package.allInstancesFrom('IN');
--- Contains all classes from IN
helper def: allINClasses:Sequence(UML2!Class) = UML2!Class.allInstancesFrom('IN');
--- Contains all Interfaces from IN
helper def: allINInterfaces:Sequence(UML2!Interface) = UML2!Interface.allInstancesFrom('IN');
--- Contains all Enumerations from IN
helper def: allINEnumerations:Sequence(UML2!Enumeration) = UML2!Enumeration.allInstancesFrom('IN');
--- Contains all Parameters from IN
helper def: allINParameters:Sequence(UML2!Parameter) = UML2!Parameter.allInstancesFrom('IN');
--- Contains all the UML2!Element from IN
helper def: allElementsFromIN: UML2!Element = UML2!Element.allInstancesFrom('IN');

--- Returns the proper type of the element, in case the type is a DataType
helper context UML2!Element def: getProperType(): UML2!Element =
	if self.type.oclIsTypeOf(UML2!DataType) then
		self.type.getElementFromDataType()
	else
		self.type
	endif;

--- Returns the element corresponding to the DataType 
helper context UML2!DataType def: getElementFromDataType(): UML2!Element =
	-- We check if the element is parameterized
	if self.name.indexOf('<')>0 then
		-- We check if the parameterized element contains another class
		--- TODO: maybe we should change this as now we assume all elements who have a
		--- class as a parameter are lists of some sort.
		if (not (self.name.split('<').last()->split('>').first().indexOf('.')>0)) then
			self.name.split('<').first().toString().replaceAll('\\.','\\::').getElementFromString()
		else
			self.name.split('<').last()->split('>').first().replaceAll('\\.', '\\::').getElementFromString()
		endif
	else
		self.name.replaceAll('\\.', '\\::').getElementFromString()
	endif;
	
--- Returns the element with the qualifiedName that ends with the input String
helper context String def: getElementFromString(): UML2!Element =
	thisModule.allINClasses.union(thisModule.allINInterfaces).union(thisModule.allINEnumerations)
	->select(e|e.qualifiedName.endsWith(self)).first();

--- Returns true if self inherits from parent
helper context UML2!Element def: inheritsFrom(elem: UML2!Element): Boolean = 
	if self.generalization.notEmpty() then
		if self.generalization.first().general=elem then true
		else if (self.oclIsTypeOf(UML2!Class) and self.interfaceRealization.notEmpty() and self.interfaceRealization.first().supplier.notEmpty()) then
				if self.interfaceRealization.first().supplier.first() = elem then true
				else self.interfaceRealization.first().supplier.first().inheritsFrom(elem) or self.generalization.first().general.inheritsFrom(elem)
				endif
			else self.generalization.first().general.inheritsFrom(elem)
			endif
		endif
	else if (self.oclIsTypeOf(UML2!Class) and self.interfaceRealization.notEmpty() and self.interfaceRealization.first().supplier.notEmpty()) then
			if self.interfaceRealization.first().supplier.first() = elem then true
			else self.interfaceRealization.first().supplier.first().inheritsFrom(elem)
			endif
		else false
		endif
	endif ;

--- This helper will add to the sequence all the children of the included elements
helper context Sequence(UML2!Element) def: addChildren(): Sequence(UML2!Element) =
	if (not (self.asSet().includesAll(self.union(thisModule.allINClasses.union(thisModule.allINInterfaces)
			->select(e|self->select(a|e.inheritsFrom(a)).notEmpty())).asSet()))) then
		self.union(thisModule.allINClasses.union(thisModule.allINInterfaces)
			->select(e|self->select(a|e.inheritsFrom(a)).notEmpty())).addChildren()
	else self
	endif;

--- Returns the element from the input model corresponding to the stereotypeApplication provided
--- Thus allowing us to use resolve() in order to get the stereotypeApplication of the element
--- in the output model.
helper context OclAny def: getElementFromValue(): UML2!Element = 
	thisModule.allElementsFromIN->select(e|e.getAppliedStereotypes().notEmpty())->select(e|e.getStereotypeApplications().first()=self).first();
	
--- Returns true if the element extends or implements 'parent', also checking recursively for all
--- their parents.
--- It's meant to be called from a UML2!.Class.ownedElement.
helper context Sequence(UML2!Element) def: checkParents(parent: UML2!Element): Boolean = 
	if parent.oclIsTypeOf(UML2!Class) then
		if self->select(e|e.oclIsTypeOf(UML2!Generalization)).notEmpty() then
			self->select(e|e.oclIsTypeOf(UML2!Generalization))->select(e|e.general=parent).notEmpty()
			or
			self->select(e|e.oclIsTypeOf(UML2!Generalization))->select(e|not e.general.oclIsUndefined())->select(e|e.general.ownedElement.checkParents(parent)).notEmpty()
		else
			false
		endif
	else
		if parent.oclIsTypeOf(UML2!Interface) then
			if self->select(e|e.oclIsTypeOf(UML2!InterfaceRealization)).notEmpty() then
				self->select(e|e.oclIsTypeOf(UML2!InterfaceRealization))->select(e|e.contract=parent).notEmpty()
				or
				self->select(e|e.oclIsTypeOf(UML2!InterfaceRealization))->select(e|not e.contract.oclIsUndefined())->select(e|e.contract.ownedElement.checkParents(parent)).notEmpty()
			else
				false
			endif
		else
			false
		endif
	endif;

--- Returns a sequence containing the ownedOperations of the element, adding a new one generated
--- with a lazy rule in case the element is stereotyped as a Subject.
	--- WE use Element so that we can use both class and Interface
helper context UML2!Element def: setOwnedOperations(): Sequence(UML2!Operation) = 
	if (not (self.getAppliedStereotype(thisModule.subjectStereotype.qualifiedName)
		.oclIsUndefined() 
		and self.getAppliedStereotype(thisModule.concreteSubjectStereotype.qualifiedName)
		.oclIsUndefined())) then
		self.ownedOperation.append(thisModule.createUpdate(self))
	else
		self.ownedOperation
	endif
	;	

--- obtains the collection of mapped elements that have not being stereotyped with given stereotype
helper def : getUnStereotypedMappedCollection(s:Sequence (UML2!Element), stereotype:UML2!Stereotype) : OclAny = 
	if (s->notEmpty()) then
		s->select(e | not e.isStereotypeApplied(stereotype)).resolve()
	else
		Sequence{}
	endif;

--- Returns true if the names are equal or one of them starts or ends with the other.
helper context OclAny def: namesEqualOrContained(name1:String,name2:String): Boolean =
	name1=name2 or name1.endsWith(name2) or name2.endsWith(name1) 
	or name1.startsWith(name2) or name2.startsWith(name1)
	;

--- Returns true if an element is contained inside a certain package or any of its
--- subpackages.
helper context OclAny def: belongsToPackage(packageName: String): Boolean =
	if self.oclIsUndefined() then
		false
	else
			if self.getNearestPackage().name = packageName then
				true
			else
				self.refImmediateComposite().belongsToPackage(packageName)
			endif
	endif;

--- Returns true if an element is contained inside a certain package or any of its
--- subpackages.
helper context OclAny def: belongsToPackage(package: UML2!Package): Boolean =
	if self.oclIsUndefined() then
		false
	else
			if self.getNearestPackage().name = package.name then
				true
			else
				self.refImmediateComposite().belongsToPackage(package)
			endif
	endif;
--- Sets the type from IN so that the property doesn't point to initial:
helper context UML2!Property def: typeFromIn(): UML2!Type =
	if UML2!Type.allInstancesFrom('IN')->select(e|not e.name.oclIsUndefined())->select(e|e.name=self.type.name).notEmpty() then
		UML2!Type.allInstancesFrom('IN')->select(e|not e.name.oclIsUndefined())->select(e|e.name=self.type.name).first()
	else
		thisModule.voidType
	endif;
--- This helper returns the proper type of a property, 
--- changing it for the different kinds of buttons.
helper context UML2!Property def: setType(): UML2!Type =
	if not self.type.oclIsUndefined() then
		if not self.type.name.oclIsUndefined() then
			if self.type.name = 'Button' then
				if self.name.endsWith('RadioButton') then
					UML2!Type.allInstances() -> select(e | e.name = 'RadioButton').first()
				else
					if self.name.endsWith('CheckBox') then
						UML2!Type.allInstances() -> select(e | e.name = 'CheckBox').
								first()
					else
						UML2!Type.allInstances() -> select(e | e.name = 'PushButton').
								first()
					endif
				endif
			else
				if self.type.name = 'Label' then
					UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'Label').first()
				else
					if self.type.name = 'Link' then
						UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'Hyperlink').first()
					else
						if self.type.name = 'Text' then
						UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'TextBox').first()
						else
							if self.type.name = 'GridLayout' then
								UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'Grid').first()
							else
								if self.type.name = 'Group' then
									UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'CaptionPanel').first()
								else
									if self.type.name = 'Combo' then
										UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'ListBox').first()
									else
										if self.type.name = 'Image' then
											UML2!Type.allInstancesFrom('IN')->select (e|e.name = 'Image').first()
										else
											self.typeFromIn()
										endif
									endif
								endif
							endif
						endif
					endif
				endif
			endif
		else
			self.typeFromIn()
		endif
	else
		self.typeFromIn()
	endif;

helper context UML2!Class def: setGroup(name : String): Sequence(UML2!Class) =
	let nameUpper : String = name.toUpper() in
	if (thisModule.classes -> select(e | e.value.toUpper().
			endsWith(nameUpper)).notEmpty()) then
		if (thisModule.classes -> select(e | e.value.toUpper().endsWith(nameUpper))
				.first().parent.name = 'actionSet') then
			Sequence{self}
		else
			Sequence{}
		endif
	else
		Sequence{}
	endif;

---This helper tests if a list is empty, in which case it returns the value ' '
helper context OclAny def: returnValue(): String =
	if (self.oclIsUndefined() or not self.oclIsTypeOf(XML!Attribute)) then 
		' '
	else
		self.value
	endif
;

helper context UML2!Class def : getOwnerPackageName() : String = 
	if (self.refImmediateComposite().oclIsUndefined()) then 
		'PackageNotFound'
	else 
		if (self.refImmediateComposite().oclIsTypeOf(UML2!Package)) then
			self.refImmediateComposite().name
		else 
			self.getOwnerPackageName()
		endif
	endif;

---Get fully qualified class name
helper context UML2!Class def : fullyQualifiedName() : String = 
	if (self.refImmediateComposite().oclIsUndefined()) then
		self.name
	else 
		if (self.refImmediateComposite().oclIsTypeOf(UML2!Package)) then
			self.refImmediateComposite().getFullyQualifiedPackageName() + '.' + self.name 
		else
			self.name
		endif
	endif
	;

--- Get fully qualified package name
helper context UML2!Package def : getFullyQualifiedPackageName() : String = 
	if (self.refImmediateComposite().oclIsUndefined() or (not self.refImmediateComposite().oclIsTypeOf(UML2!Package))) then
		self.name
	else
		self.refImmediateComposite()->getFullyQualifiedPackageName() + '.' + self.name
	endif;

--- Check if the element has a give stereotype
helper context UML2!Element def: hasStereotype(stereotype : UML2!Stereotype) : Boolean =
	self.getAppliedStereotypes() -> includes(stereotype);

--- Get stereotypes of a uml entity
helper context OclAny def: getStereotypes() : Set(UML2!Stereotype) = 
	if (not self.getAppliedStereotypes().oclIsUndefined()) then
		self.getAppliedStereotypes().asSet()
	else 
		 Set{}
	endif;
	
--- Returns true if the element belongs to the main model
helper context UML2!Element def : belongsToMainModel() : Boolean = 
	
	if (self.oclIsTypeOf(UML2!Model) and (self.name = 'externals' or 
										  self.name ='sourcesReferences')) then
		false
	else 
		if (self.refImmediateComposite().oclIsUndefined()) then
			true
		else
			self.refImmediateComposite()->belongsToMainModel()
		endif
	endif;

helper def : getMainModel() : UML2!Model = UML2!Model.allInstancesFrom('IN')->select(m | m.oclIsTypeOf(UML2!Model) and
	not (m.name = 'externals') and not (m.name = 'sourcesReferences') and not (m.name = 'root model'))->first();



--- returns whether or not the given package (or nested classes) contains a class that has been stereotyped with given stereotype
helper context UML2!Package def : containsStereotypedClass(ste:UML2!Stereotype) : Boolean = 
	if (self.packagedElement->isEmpty()) then
		 false
	else
		if (self.packagedElement-> exists(c | c.oclIsTypeOf(UML2!Class) and c.hasStereotype(ste))) then
			true
		else 
			self.packagedElement-> exists(p | p.oclIsTypeOf(UML2!Package) and p.containsStereotypedClass(ste))
		endif
	endif;	

	
--- returns whether or not the given package (or nested classes) contains a class
helper context UML2!Package def : containsClass(class:UML2!Class) : Boolean =
	if (self.packagedElement->isEmpty()) then
		 false
	else
		if (self.packagedElement-> exists(c | c.oclIsTypeOf(UML2!Class) and c = class)) then
			true
		else 
			if (self.packagedElement-> exists(p | p.oclIsTypeOf(UML2!Package) and p.containsClass(class))) then
				true
			else
				-- returns true when a nested class is in the package
				self.packagedElement-> exists(s | s.oclIsTypeOf(UML2!Class) and s.ownedElement->exists(inner | inner = class))
			endif
		endif
	endif;	


--- returns a set of packages corresponding to the given sequence of classes
helper context Sequence(UML2!Class) def : getPackagesForClasses () : Set(UML2!Package) =
	let result : Set(UML2!Package) = self->select (c | c.refImmediateComposite().oclIsTypeOf(UML2!Package))
		->collect(c | c.refImmediateComposite()) in result;

--- return a sequence of classes located in a given package
helper context Sequence(UML2!Class) def : getClassesInPackage(p: UML2!Package) : OclAny = 
	self->select(c | c.refImmediateComposite() = p);

--- return a sequence of packages nested within the parent package of given class that contains classes stereotyped with given stereotype.
helper context UML2!Class def : locatePackageWithComponentsOfType(ste: UML2!Stereotype) : Sequence (UML2!Package) = 
	self.refImmediateComposite().packagedElement->select(p | 
		p.oclIsTypeOf(UML2!Package) and p.containsStereotypedClass(ste));

--- returns an OclUndefined 
helper def : any() : OclAny = OclUndefined;

--- returns whether or not a class is inner (defined within another class)
helper context UML2!Class def : isInnerClass() : Boolean = self.owner->oclIsTypeOf(UML2!Class);

